import openai from '../config/openai';
import ServerError from '../util/error/ServerError';
import { NameGenRequestBody } from '../util/RequestSchemas';
import openAICreateModeration from './openAICreateModeration';

const generatePrompt = ({ keywords, cuisine, location }: NameGenRequestBody) => {
  const prompt = `
You are a restaurant name generating AI.

Using the information below, create a new name for a restaurant. The name should be as creative as possible.

keywords: ${keywords.join(', ')}
cuisine: ${cuisine}
location: ${location}

This restaurant is called:`;
  return prompt;
};

const openAICreateName = async (info: NameGenRequestBody, id: string) => {
  try {
    const { cuisine, keywords, location } = info;
    const prompt = generatePrompt({
      keywords,
      cuisine,
      location,
    });

    const result = await openai.createCompletion({
      model: 'text-curie-001',
      prompt,
      max_tokens: 100,
      user: id,
    });
    const data = result.data.choices![0].text!.replace(/[\r\n]/gm, '');
    const moderation = await openAICreateModeration(data);

    if (moderation.results[0].flagged) {
      throw new Error(
        'The response generated by OpenAI was flagged as inappropriate. Please try again.',
      );
    }

    return data;
  } catch (error) {
    const errorIsError = error instanceof Error;

    const message = errorIsError
      ? error.message
      : 'The server failed to send a request to OpenAI.';
    const status = errorIsError ? 400 : 500;

    throw new ServerError(message, status);
  }
};

export default openAICreateName;
